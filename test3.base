logical isFactor{integer dividend, integer maybeFactor} [
  integer quotient.

  !! get quotient using integer division (i.e. remainder is discarded)
  quotient = dividend / maybeFactor.

  !! if quotient * divisor gets us back our original number, it was an exact divisor, so it is a factor
  return maybeFactor * quotient == dividend.
]

logical isPrime{integer maybePrime} [
  integer maybeFactor.
  maybeFactor = 2.
  
  while maybeFactor < maybePrime [
    if isFactor(maybePrime, maybeFactor) [
      return False.
    ]
    maybeFactor++.
  ]
  return True.
]

void poorlyOptimizedPrimeFinder{integer n} [
  integer maybePrime.
  maybePrime = 2.

  while maybePrime <= n [
    if isPrime(maybePrime) [
      write << maybePrime.
      write << "\n".
    ]
    maybePrime++.
  ]
]

void main{} [
  integer n.

  write << "Enter the number for which you want to find all smaller or equal primes: ".
  read >> n.
  write << "\n".

  if n < 2 [
    write << "Error: no primes less than 2".
    write << "\n".
    return.
  ]

  poorlyOptimizedPrimeFinder(n).
]
